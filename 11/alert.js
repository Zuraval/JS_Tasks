"use strict";

// Следующая функция возвращает true, если параметр age больше 18.
// В ином случае она запрашивает подтверждение через confirm и возвращает его результат:

function checkAge(age) {
  if (age > 18) {
    return true;
  } else {
    // ...
    return confirm('Родители разрешили?');
  }
}
// Будет ли эта функция работать как-то иначе, если убрать else?

function checkAge(age) {
  if (age > 18) {
    return true;
  }
  // ...
  return confirm('Родители разрешили?');
}
// Есть ли хоть одно отличие в поведении этого варианта? 
// Функции будут работать одинаково

// Следующая функция возвращает true, если параметр age больше 18.
// В ином случае она задаёт вопрос confirm и возвращает его результат.

// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   } else {
//     return confirm('Родители разрешили?');
//   }
// }
// Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.
// Сделайте два варианта функции checkAge:

// Используя оператор ?
// Используя оператор ||

function checkAge(age) {

	return (age > 18) ? true : confirm('Родители разрешили?'); // 1 вариант

	return (age > 18) || confirm('Родители разрешили?'); // 2 вариант
}

// Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.

function min(a, b) {
	if (a < b) {
		return a;
	} else if (a == b) {
		return alert('Переменные равны');
	} else {
		return b;
	}
}

// Напишите функцию pow(x,n), которая возводит x в степень n и возвращает результат.
// Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).

// P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.

function pow(x, n) {
	let result = Math.pow(x, n)

	return result;
}

let x = prompt("x?", " ");
let n = prompt("n?", " ");

if (n < 1) {
	alert(`Степень ${n} не поддерживается, используйте натуральное число`);
  } else {
	alert( pow(x, n) );
  }